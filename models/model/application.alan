users
	dynamic: .'Users'
	user-initializer: (
		'Type' = create 'Unknown' ( )
	)

	passwords: .'Passwords'
		password-value: .'Data'.'Password'
		password-status: .'Data'.'Active'
			active: 'Yes' ( )
			reset: 'No' ( )
		password-initializer: (
			'Data' = ( )
		)


	authorities: .'Authorities'
		identities: .'Identities'>'User'
		identity-initializer: ( )

interfaces

root {


	'Users': collection ['Name']
		can-create: user .'Type'?'RVO Office'
		can-delete: user .'Type'?'RVO Office'
	{
		can-update: user .'Type'?'RVO Office'
		'Name': text
		'Type': stategroup (
			'RVO Office' { }
			'Unknown' { has-todo: user .'Type'?'RVO Office' }
			'Tax Office Employee' { }
			'Applicant' { }
		)
	}
	'Passwords': collection ['User']
		can-create: user .'Type'?'RVO Office'
		can-delete: user .'Type'?'RVO Office'
	{
		can-update: user .'Type'?'RVO Office'
		'User': text -> ^ .'Users'[]
		'Data': group {
			can-update: user is ( ^ >'User' )

			'Password': text
			'Active': stategroup (
				'No' { }
				'Yes' { }
			)
		}
	}

	'Authorities': collection ['Authority']
		can-create: user .'Type'?'RVO Office'
		can-delete: user .'Type'?'RVO Office'
	{
		can-update: user .'Type'?'RVO Office'
		'Authority': text
		'Identities': collection ['Identity'] {
			'Identity': text
			'User': text -> ^ ^ .'Users'[]
		}
	}

	'Applicant': collection ['Applicant id']
		// can-create: user .'Type'?'Applicant'
		can-delete: user .'Type'?'RVO Office'
	{
		can-read: user .'Type'?'Tax Office Employee' || user .'Type'?'RVO Office' || user .'Type'?'Applicant'
		can-update: user .'Type'?'Applicant'
		'Applicant id': text
			@default: guid
		// 'Type of applicant': stategroup (
		// 	'Company with employees' { }
		// 	'Entrepreneur with employees' { }
		// 	'Entrepreneur without employees' { }
		// )
		// 'KVK number': text
		// 	@validate: "^\\d{8}$"
		// 	@description: "please use a valid KVK number (8 digits)"
		// 'First of the year': stategroup (
		// 	'Yes' { }
		// 	'No' {
		// 		'How many others?': number positive ' '
		// 	}
		// )
		'Projects': reference-set -> downstream ^ .'Project'* = inverse >'Project Applicant'
		'Project Count': number 'count' = count < 'Projects'* @hidden
		'Application Count': number 'count' = sum < 'Projects'* . 'Application Count'
		// 'Total Applications': reference-set -> downstream ^ .'Application'* = inverse >'Applicant'
	}

	'Project': collection ['Project id']
		// can-create: user .'Type'?'Applicant'
		can-delete: user .'Type'?'RVO Office'
	{ 	can-read: user .'Type'?'Tax Office Employee' || user .'Type'?'RVO Office' || user .'Type'?'Applicant'
		can-update: user .'Type'?'Applicant'
		'Project id': text
		'Project Applicant': text -> ^ .'Applicant'[] -<'Projects'
		'Applications': reference-set -> downstream ^ .'Application'* = inverse >'Application Project'
		'Application Count': number 'count' = count < 'Applications'* //@hidden
	}

	'Application': collection ['app id']
		// can-create: user .'Type'?'Applicant'
		can-delete: user .'Type'?'RVO Office'
	{
		can-read: user .'Type'?'Tax Office Employee' || user .'Type'?'RVO Office' || user .'Type'?'Applicant'
		'app id': text
		// TODO should be hidden
			@default: guid
		'Application Project': text -> ^ .'Project'[] -<'Applications'

		'Application Applicant id': text = >'Application Project'.'Project Applicant'
		// 'test': text ~> ^ .'Applicant'[] as $'a'
		// 	where 'match' ~> $ .'Application Count' = number 4
		// 'Product': text -> ^ .'Products'[] as $'p'     // reference rule for text
		// where 'In Stock' -> $'p'.'In Stock'?'Yes'
		'Applicants': text -> ^ .'Applicant'[]
		'Application Applicant Count': stategroup = switch >'Applicants' (
			| node as $ => 'Yes' where 'Total Count' = $ ( 'Application Count' = $ .'Application Count')
			| none => 'No' ( )
		) (
			'Yes' where 'Total Count' -> >'Applicants' {
				'Application Count': number 'count' = parameter
				@description: "Should be below 4"
			}
			'No' { }
		)
		// 'Counter': number 'count' ~> ^ .'Application Applicant Count'
		// 'Application Applicant Count': text -> ^ .'Applicant'[] as $'a'
		// 	where 'test' -> $'a'.'Applicant id' = > 'Application Applicant id'
		// 'start date': number 'date'
		// 'end date': number 'date'
		// 'employee(s)': collection ['employee id'] {
		// 	'employee id' : text
		// 		@default: guid
		// 	'name': text
		// 	'BSN': text
		// 		@validate: "^\\d{9}$"
		// 		@description: "please use a valid BSN number (9 digits)"
		// }
		// 'Application Count ref': text -> ^ .'Applicant' as $'a'
		'hours worked': number 'hours'
			@description: "inschatting van het aantal S&O-uren tot en met 31 december;"
	}

	// 'Catalog': group {
	// 	'Products': collection ['Name'] {
	// 		'Name': text
	// 		'Price': number 'eurocent'
	// 		'Description': text
	// 	}
	// }

	// 'Orders': collection ['ID'] {
	// 	'ID': text
	// 	'Product': text ~> ^ .'Catalog'.'Products'[]
	// 	'Product found': stategroup = switch >'Product' (
	// 		| node as $ => 'Yes' where 'Found Product' = $ ( 'Price' = $ .'Price' )
	// 		| none => 'No' ( )
	// 	) (
	// 		'Yes'{ }
	// 		'No' { }
	// 	)
	// }


}

numerical-types
	'KVK number'
	' '
	'count'
	'BSN'
	'date' in 'days' @date
	'days'
	'hours'
		@numerical-type: (
			label: "Hours per quarter"
			decimals: 2
		)
	'eurocent'
		// = 'units' * 'eurocent'
		= 'fraction' * 'eurocent'
		// = 'eurocent' * 'percent'
		@numerical-type: (
			label: "Euro"
			decimals: 2
		)
	'fraction'
		// = 'fraction' * 1 * 1  ^ 1
		= 'percent'  * 1 * 10 ^ -2
		= 'promille' * 1 * 10 ^ -3
		@numerical-type: (
			label: "1/%"
			decimals: 3
		)
	'percent'
		= 'fraction' * 1 * 10 ^ 2
		@numerical-type: (
			label: "%"
		)
	'promille'
		= 'percent' * 1 * 10 ^ 1
		@numerical-type: (
			label: "%"
			decimals: 1
		)
