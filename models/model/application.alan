users
	anonymous

interfaces

root {
	'Management': group {
		'Discount periods': collection ['Period'] {
			'Period': text
			'Percentage': number 'percent'
			'Minimal spendings': number 'eurocent'
		}
		'VAT percentage': number 'percent'
		'Beverage types': collection ['Beverage type'] {
			'Beverage type': text
		}
		'Tables': collection ['Table number'] {
			'Table number': text
			'Seatings': number 'chairs'
			'Orders': reference-set -> downstream ^ ^ .'Service'.'Orders'* .'Order type'?'In-house' = inverse >'Table'
			'Number of orders': number 'units' = count <'Orders'*
			'Total order value': number 'eurocent' = sum <'Orders'* ^ .'Total'
		}
	}
	'Kitchen': group {
		'Products': collection ['Product']
			'Assembly': acyclic-graph
		{
			'Product': text
			'Product type': stategroup (
				'Basic ingredient' {
					'Amount': number positive 'units'
					'Purchase price': number 'thousandth eurocent'
				}
				'Composed product' {
					'Composed amount': number positive 'units'
					'Ingredients': collection ['Product'] {
						'Product': text -> ^ ^ sibling in ( 'Assembly' )
						'Amount': number 'units'
						'Price per unit': number 'thousandth eurocent' = ( recurse ^ ^ 'Assembly' ) division (
							>'Product'.'Cost price' as 'thousandth eurocent',
							>'Product'.'Amount'
						)
						'Price': number 'thousandth eurocent' = ( recurse ^ ^ 'Assembly' ) product (
							.'Price per unit' as 'thousandth eurocent',
							.'Amount'
						)
					}
				}
			)
			'Amount': number positive 'units' = ( recurse 'Assembly' ) switch .'Product type' (
				|'Basic ingredient' as $'basic' => $'basic'.'Amount'
				|'Composed product' as $'composed' => $'composed'.'Composed amount'
			)
			'Cost price': number 'thousandth eurocent' = ( recurse 'Assembly' ) switch .'Product type' (
				|'Basic ingredient' as $'basic' => $'basic'.'Purchase price'
				|'Composed product' as $'composed' => sum $'composed'.'Ingredients'* .'Price'
			)
			'To be put on menu': stategroup (
				'Yes' { }
				'No' { }
			)
		}
	}
	'Service': group {
		'Menu': collection ['Item name'] {
			'Item name': text -> ^ ^ .'Kitchen'.'Products'[] as $
				where 'menu item' -> $ .'To be put on menu'?'Yes'
			'Selling price': number 'eurocent'
			'Item type': stategroup (
				'Dish' {
					'Dish type': stategroup (
						'Appetizer' { }
						'Main course' { }
						'Dessert' { }
					)
				}
				'Beverage' {
					'Beverage type': text -> ^ ^ ^ .'Management'.'Beverage types'[]
				}
			)
		}
		'Orders': collection ['Order'] {
			'Order': text @default: auto-increment
			'Order type': stategroup (
				'Takeaway' { }
				'In-house' {
					'Table': text -> ^ ^ ^ .'Management'.'Tables'[] -<'Orders'
				}
			)
			'Order lines': collection ['Order line'] {
				'Order line': text @default: auto-increment
				'Item': text -> ^ ^ .'Menu'[]
				'Amount': number 'units'
				'Line total': number 'eurocent' = product (
					.'Amount' as 'units',
					>'Item'.'Selling price'
				)
				'Line status': stategroup (
					'On hold' {
						'Place order line': command { } => update ^ .'Line status' = create 'Placed' ( )
					}
					'Placed' {
						'Ready for service': command { } => update ^ .'Line status' = create 'Service' ( )
					}
					'Service' {
						'Priority': stategroup = switch ^ >'Item'.'Item type' (
							|'Beverage' => 'Low' ( )
							|'Dish'     as $'dish' => switch $'dish'.'Dish type' (
								|'Appetizer'   => 'Medium' ( )
								|'Main course' => 'High' ( )
								|'Dessert'     => 'Low' ( )
							)
						) (
							'Low' { }
							'Medium' { }
							'High' { }
						)
						'Served': command { } => update ^ .'Line status' = create 'Served' ( )
					}
					'Served' { }
				)
				'To serve': stategroup = switch ^ .'Order type' (
					|'Takeaway' => 'No' ( )
					|'In-house' as $'in-house' => switch .'Line status' (
						|'On hold' => 'No' ( )
						|'Placed'  => 'No' ( )
						|'Service' as $'service' => 'Yes' where 'Service' = $'service' ( 'Table' = $^ $'in-house'>'Table' )
						// where 'In-house' = $^ $'in-house' ( )
						|'Served'  => 'No' ( )
					)
				) (
					'No' { }
					'Yes' where 'Service' -> .'Line status'?'Service'
					// where 'In-house' -> ^ .'Order type'?'In-house'
					{
						// 'Table': text = .&'In-house' .'Table'
						'Table': text -> ^ ^ ^ ^ .'Management'.'Tables'[] = parameter
						'Priority': stategroup = switch .&'Service'.'Priority' (
							|'Low'    => 'Low' ( )
							|'Medium' => 'Medium' ( )
							|'High'   => 'High' ( )
						) (
							'Low' { }
							'Medium' { }
							'High' { }
						)
					}
				)
			}
			'Place order lines': command { } => walk .'Order lines' as $'line' ( switch $'line'.'Line status' (
				|'On hold' => update $'line' (
					'Line status' = create 'Placed' ( )
				)
				|'Placed'  => ignore
				|'Service' => ignore
				|'Served'  => ignore
			) )
			'Order status': stategroup (
				'Open' {
					'All served': stategroup = switch ^ .'Order lines'* .'Line status'?'On hold' (
						| none  => switch ^ .'Order lines'* .'Line status'?'Placed' (
							| none  => switch ^ .'Order lines'* .'Line status'?'Service' (
								| none  => 'Yes' ( )
								| nodes => 'No' ( )
							)
							| nodes => 'No' ( )
						)
						| nodes => 'No' ( )
					) (
						'No' { }
						'Yes' {
							'Paid': command { } => update ^ ^ .'Order status' = create 'Closed' ( )
						}
					)
				}
				'Closed' { }
			)
			'Subtotal': number 'eurocent' = sum .'Order lines'* .'Line total'
			'Discount applicable': stategroup (
				'Yes' {
					'Discount period': text -> ^ ^ ^ .'Management'.'Discount periods'[]
					'Discount': number 'eurocent' = switch ^ .'Subtotal' compare ( >'Discount period'.'Minimal spendings' ) (
						| <  => 0
						| >= => product (
							from 'percent'>'Discount period'.'Percentage' as 'fraction',
							^ .'Subtotal'
						)
					)
				}
				'No' { }
			)
			'Total': number 'eurocent' = switch .'Discount applicable' (
				|'Yes' as $'discount' => sum (
					$'discount' ^ .'Subtotal',
					- $'discount'.'Discount'
				)
				|'No'  => .'Subtotal'
			)
			'VAT': number 'eurocent' = product (
				from 'percent' ^ ^ .'Management'.'VAT percentage' as 'fraction',
				.'Total'
			)
		}
		'Place new order': command {
			'Provide an order number': text
			'Where is the meal consumed?': stategroup (
				'Outside of restaurant' { }
				'At the restaurant' {
					'Where is the customer seated?': text -> ^ .'Management'.'Tables'[]
				}
			)
			'Order lines': collection ['Provide an order line number'] {
				'Provide an order line number': text
				'Item to be consumed': text -> .'Menu'[]
				'Amount of this item': number 'units'
			}
			'Apply discount?': stategroup (
				'Yes' {
					'Discount period': text -> ^ .'Management'.'Discount periods'[]
				}
				'No' { }
			)
		} => update .'Orders' = create (
			'Order' = @ .'Provide an order number'
			'Order type' = switch @ .'Where is the meal consumed?' (
				|'Outside of restaurant' => create 'Takeaway' ( )
				|'At the restaurant'     as $ => create 'In-house' (
					'Table' = $ .'Where is the customer seated?'
				)
			)
			'Order lines' = walk @ .'Order lines' as $ ( create (
				'Order line' = $ .'Provide an order line number'
				'Item' = $ .'Item to be consumed'
				'Amount' = $ .'Amount of this item'
				'Line status' = create 'Placed' ( )
			) )
			'Order status' = create 'Open' ( )
			'Discount applicable' = switch @ .'Apply discount?' (
				|'Yes' as $ => create 'Yes' (
					'Discount period' = $ .'Discount period'
				)
				|'No'  => create 'No' ( )
			)
		)
	}
}

numerical-types
	'eurocent'
		= 'units' * 'eurocent'
		= 'fraction' * 'eurocent'
		@numerical-type: (
			label: "Euro"
			decimals: 2
		)
	'thousandth eurocent'
		= 'thousandth eurocent' * 'units'
		= 'thousandth eurocent' / 'units'
		@numerical-type: (
			label: "Euro"
			decimals: 5
		)
	'chairs'
	'units'
	'percent'
	'fraction'
		= 'percent' / 1 * 10 ^ 2
